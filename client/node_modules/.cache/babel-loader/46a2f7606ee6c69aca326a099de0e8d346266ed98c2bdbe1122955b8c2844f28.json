{"ast":null,"code":"var _jsxFileName = \"C:\\\\hybby\\\\test_front\\\\my-app\\\\src\\\\containers\\\\MainContainer.js\";\nimport React from 'react';\nimport ToDoCard from '../components/ToDoCard';\nimport CreateCard from '../components/CreateCard';\nimport ToDoCardContainer from './ToDoCardContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class MainContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      cards: []\n    };\n    this.createNewCard = input => {\n      fetch(\"http://localhost:3000/cards\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          title: input\n        })\n      }).then(resp => resp.json()).then(newCard => {\n        this.setState({\n          cards: [...this.state.cards, newCard]\n        });\n      });\n    };\n    this.addList = (cardId, input) => {\n      fetch(\"http://localhost:3000/lists\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          description: input,\n          card_id: cardId,\n          completed: false\n        })\n      }).then(resp => resp.json()).then(newList => {\n        const foundCard = {\n          ...this.state.cards.find(card => card.id === cardId)\n        };\n        foundCard.lists = [...foundCard.lists, newList];\n        const newCards = this.state.cards.map(card => {\n          if (card.id === cardId) {\n            return foundCard;\n          } else {\n            return card;\n          }\n        });\n        this.setState({\n          cards: newCards\n        });\n      });\n    };\n    this.handleClickList = (cardId, listId) => {\n      const foundCard = {\n        ...this.state.cards.find(card => card.id === cardId)\n      };\n      const foundList = foundCard.lists.find(list => list.id === listId);\n      let newState = null;\n      if (foundList.completed) {\n        newState = false;\n      } else {\n        newState = true;\n      }\n      fetch(`http://localhost:3000/lists/${listId}`, {\n        method: \"PATCH\",\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json'\n        },\n        body: JSON.stringify({\n          completed: newState\n        })\n      }).then(resp => resp.json()).then(newList => {\n        const newLists = foundCard.lists.map(list => {\n          if (list.id === listId) {\n            return newList;\n          } else {\n            return list;\n          }\n        });\n        foundCard.lists = newLists;\n        const newCards = this.state.cards.map(card => {\n          if (card.id === cardId) {\n            return foundCard;\n          } else {\n            return card;\n          }\n        });\n        this.setState({\n          cards: newCards\n        });\n      });\n    };\n  }\n  componentDidMount() {\n    fetch(\"http://localhost:3000/cards\").then(resp => resp.json()).then(cards => {\n      this.setState({\n        cards: cards\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(ToDoCardContainer, {\n        cards: this.state.cards,\n        addList: this.addList,\n        handleClickList: this.handleClickList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateCard, {\n        createNewCard: this.createNewCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","ToDoCard","CreateCard","ToDoCardContainer","MainContainer","Component","state","cards","createNewCard","input","fetch","method","headers","Accept","body","JSON","stringify","title","then","resp","json","newCard","setState","addList","cardId","description","card_id","completed","newList","foundCard","find","card","id","lists","newCards","map","handleClickList","listId","foundList","list","newState","newLists","componentDidMount","render"],"sources":["C:/hybby/test_front/my-app/src/containers/MainContainer.js"],"sourcesContent":["import React from 'react'\r\nimport ToDoCard from '../components/ToDoCard'\r\nimport CreateCard from '../components/CreateCard'\r\nimport ToDoCardContainer from './ToDoCardContainer'\r\n\r\n\r\nexport default class MainContainer extends React.Component {\r\n\r\n  state = {\r\n    cards: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(\"http://localhost:3000/cards\")\r\n    .then(resp => resp.json())\r\n    .then(cards => {\r\n      this.setState({\r\n        cards: cards\r\n      })\r\n    })\r\n  }\r\n\r\n  createNewCard = (input) => {\r\n    fetch(\"http://localhost:3000/cards\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        title: input\r\n      })\r\n    })\r\n    .then(resp => resp.json())\r\n    .then(newCard => {\r\n      this.setState({\r\n        cards: [...this.state.cards, newCard]\r\n      })\r\n    })\r\n  }\r\n\r\n  addList = (cardId, input) => {\r\n    fetch(\"http://localhost:3000/lists\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        description: input,\r\n        card_id: cardId,\r\n        completed: false\r\n      })\r\n    })\r\n    .then(resp => resp.json())\r\n    .then(newList => {\r\n      const foundCard = {...this.state.cards.find(card => card.id === cardId)}\r\n      foundCard.lists = [...foundCard.lists, newList]\r\n\r\n      const newCards = this.state.cards.map(card => {\r\n        if (card.id === cardId){\r\n          return foundCard\r\n        } else {\r\n          return card\r\n        }\r\n      })\r\n\r\n      this.setState({\r\n        cards: newCards\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n  handleClickList = (cardId, listId) => {\r\n\r\n    const foundCard = {...this.state.cards.find(card => card.id === cardId)}\r\n    const foundList = foundCard.lists.find(list => list.id === listId)\r\n\r\n    let newState = null\r\n\r\n    if (foundList.completed) {\r\n      newState = false\r\n    } else {\r\n      newState = true\r\n    }\r\n\r\n    fetch(`http://localhost:3000/lists/${listId}`, {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        completed: newState\r\n      })\r\n    })\r\n    .then(resp => resp.json())\r\n    .then(newList => {\r\n\r\n      const newLists = foundCard.lists.map(list => {\r\n        if (list.id === listId){\r\n          return newList\r\n        } else {\r\n          return list\r\n        }\r\n      })\r\n      foundCard.lists = newLists\r\n\r\n\r\n      const newCards = this.state.cards.map(card => {\r\n        if (card.id === cardId) {\r\n          return foundCard\r\n        } else {\r\n          return card\r\n        }\r\n      })\r\n\r\n      this.setState({\r\n        cards: newCards\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"main-container\">\r\n        <ToDoCardContainer cards={this.state.cards} addList={this.addList} handleClickList={this.handleClickList}/>\r\n        <CreateCard createNewCard={this.createNewCard}/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}